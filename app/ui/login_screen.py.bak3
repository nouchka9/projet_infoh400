# -*- coding: utf-8 -*-
"""
Écran de connexion de l'application HL7 Messenger.
"""
import tkinter as tk
from tkinter import ttk, messagebox
import logging

class LoginScreen(ttk.Frame):
    """Écran de connexion pour l'application HL7 Messenger"""
        # Configurer les comportements améliorés des menus déroulants
        self._setup_combobox_behavior()


    def __init__(self, parent, on_login_callback):
        super().__init__(parent)
        self.logger = logging.getLogger("HL7Messenger.LoginScreen")
        self.parent = parent
        self.on_login_callback = on_login_callback

        # Liste des départements disponibles
        self.departments = [
            "ADMISSION",
            "LABORATORY",
            "RADIOLOGY",
            "PHARMACY"
        ]
        
        # Mode de fonctionnement (normal ou démo)
        self.modes = ["Normal", "Démo"]

        # Créer l'interface
        self._create_widgets()

        # Activer la touche entrée
        
        # Amélioration de la touche Entrée
        def handle_return(event):
            # Trouver le widget qui a le focus
            focused = self.focus_get()
            
            # Si c'est dans le menu déroulant, passer au bouton de login
            if isinstance(focused, ttk.Combobox):
                self.update_idletasks()
                login_button.focus()
                return
                
            # Sinon, déclencher le login
            self._on_login()
            return "break"  # Arrêter la propagation de l'événement
            
        self.bind_all("<Return>", handle_return)
        

    def _create_widgets(self):
        main_frame = ttk.Frame(self, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)

        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(8, weight=1)  # Augmenté pour ajouter le sélecteur de mode

        login_frame = ttk.Frame(main_frame, padding=20)
        login_frame.grid(row=1, column=1, sticky="nsew")

        title_label = ttk.Label(login_frame, text="HL7 Messenger - Connexion", style="Title.TLabel")
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))

        # Username
        username_label = ttk.Label(login_frame, text="Nom d'utilisateur:")
        username_label.grid(row=1, column=0, sticky="w", pady=(0, 5))
        self.username_var = tk.StringVar()
        username_entry = ttk.Entry(login_frame, textvariable=self.username_var, width=30)
        username_entry.grid(row=1, column=1, sticky="ew", pady=(0, 5))
        username_entry.focus_set()

        # Password
        password_label = ttk.Label(login_frame, text="Mot de passe:")
        password_label.grid(row=2, column=0, sticky="w", pady=(0, 5))
        self.password_var = tk.StringVar()
        password_entry = ttk.Entry(login_frame, textvariable=self.password_var, show="*", width=30)
        password_entry.grid(row=2, column=1, sticky="ew", pady=(0, 5))

        # Department
        department_label = ttk.Label(login_frame, text="Département:")
        department_label.grid(row=3, column=0, sticky="w", pady=(0, 5))
        self.department_var = tk.StringVar()
        department_combo = ttk.Combobox(login_frame, textvariable=self.department_var,
                                        values=self.departments, state="readonly", width=28)
        department_combo.grid(row=3, column=1, sticky="ew", pady=(0, 5))
        department_combo.current(0)
        
        # Mode (Normal/Démo)
        mode_label = ttk.Label(login_frame, text="Mode:")
        mode_label.grid(row=4, column=0, sticky="w", pady=(0, 5))
        self.mode_var = tk.StringVar(value="Normal")
        mode_frame = ttk.Frame(login_frame)
        mode_frame.grid(row=4, column=1, sticky="w", pady=(0, 5))
        
        for i, mode in enumerate(self.modes):
            rb = ttk.Radiobutton(mode_frame, text=mode, variable=self.mode_var, value=mode)
            rb.pack(side=tk.LEFT, padx=10)

        # Error message
        self.error_var = tk.StringVar()
        error_label = ttk.Label(login_frame, textvariable=self.error_var, style="Error.TLabel")
        error_label.grid(row=5, column=0, columnspan=2, pady=(5, 0))

        # Buttons
        button_frame = ttk.Frame(login_frame)
        button_frame.grid(row=6, column=0, columnspan=2, pady=(20, 0))

        login_button = ttk.Button(button_frame, text="Connexion", command=self._on_login, width=15)
        login_button.pack(side=tk.LEFT, padx=5)

        exit_button = ttk.Button(button_frame, text="Quitter", command=self._on_exit, width=15)
        exit_button.pack(side=tk.LEFT, padx=5)

    def _on_login(self):
        username = self.username_var.get().strip()
        password = self.password_var.get().strip()
        department = self.department_var.get()
        mode = self.mode_var.get()
        
        # Détermine si on est en mode démo
        is_demo = (mode == "Démo")

        if not username:
            self.error_var.set("Veuillez entrer un nom d'utilisateur")
            return

        if not password:
            self.error_var.set("Veuillez entrer un mot de passe")
            return

        if not department or department not in self.departments:
            self.error_var.set("Veuillez sélectionner un département valide")
            return

        self.logger.info(f"Tentative de connexion: {username} / {department} / Mode: {mode}")
        print(f"Tentative de connexion: {username} / {department} / Mode: {mode}")

        # IMPORTANT: Nous passons seulement 2 arguments au callback comme attendu
        self.on_login_callback(username, department)

    def _on_exit(self):
        if messagebox.askyesno("Quitter", "Voulez-vous vraiment quitter l'application?"):
            self.parent.quit()
            
    def refresh(self):
        """Rafraîchit l'interface (appelé par F5)"""
        pass  # Rien à faire pour l'écran de login

    def cancel(self):
        """Annule l'opération en cours (appelé par Escape)"""
        # Effacer les champs
        self.username_var.set("")
        self.password_var.set("")
        self.error_var.set("")

    def handle_return(self, event=None):
        """Gère la touche Entrée de manière contextualisée"""
        # Si le focus est sur un champ, aller au suivant
        current = self.focus_get()
        
        if current and current.winfo_class() == 'TEntry':
            # Si c'est le dernier champ, valider
            if current == self.winfo_children()[0].winfo_children()[1].winfo_children()[5]:
                self._on_login()
            else:
                # Sinon, passer au champ suivant
                current.tk_focusNext().focus()
            return "break"
        
        # Par défaut, valider
        self._on_login()
        return "break"

    def _setup_combobox_behavior(self):
        """Configure les comportements améliorés pour tous les Combobox"""
        # Trouver tous les Combobox dans l'interface
        for widget in self.winfo_children():
            self._find_and_setup_comboboxes(widget)
    
    def _find_and_setup_comboboxes(self, parent):
        """Recherche et configure récursivement tous les Combobox"""
        for child in parent.winfo_children():
            if isinstance(child, ttk.Combobox):
                # Configurer le double-clic pour valider la sélection
                child.bind("<Double-1>", lambda e: self._on_combobox_doubleclick(e))
                
                # Configurer la touche Entrée pour valider aussi
                child.bind("<Return>", lambda e: self._on_combobox_enter(e))
                
                # S'assurer que la sélection est appliquée lors du clic
                child.bind("<<ComboboxSelected>>", lambda e: self._on_combobox_selected(e))
            
            # Chercher récursivement dans les enfants
            if hasattr(child, "winfo_children"):
                self._find_and_setup_comboboxes(child)
    
    def _on_combobox_doubleclick(self, event):
        """Gère le double-clic sur un menu déroulant"""
        combobox = event.widget
        
        # Si le menu est ouvert, le fermer et valider la sélection
        if combobox["state"] == "readonly":
            # Forcer la mise à jour de la variable liée
            value = combobox.get()
            var_name = str(combobox.cget("textvariable"))
            
            # Passer au champ suivant
            combobox.tk_focusNext().focus()
            
            # Forcer la mise à jour visuelle
            self.update_idletasks()
    
    def _on_combobox_enter(self, event):
        """Gère la touche Entrée dans un menu déroulant"""
        combobox = event.widget
        
        # Forcer la mise à jour de la variable liée
        value = combobox.get()
        
        # Passer au champ suivant
        combobox.tk_focusNext().focus()
        
        # Forcer la mise à jour visuelle
        self.update_idletasks()
    
    def _on_combobox_selected(self, event):
        """Gère la sélection dans un menu déroulant"""
        # Forcer la mise à jour visuelle
        self.update_idletasks()
