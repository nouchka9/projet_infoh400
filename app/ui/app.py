# -*- coding: utf-8 -*-
"""
Application principale HL7 Messenger - VERSION FINALE CORRIG√âE
R√©sout tous les probl√®mes de widgets Tkinter et de navigation
"""
import tkinter as tk
from tkinter import ttk, messagebox, PhotoImage
import os
import platform
import logging

from app.ui.login_screen import LoginScreen
from app.ui.dashboard import Dashboard
from app.network.mllp_client import MLLPClient
from app.hl7_engine.builder import HL7MessageBuilder

class HL7MessengerApp:
    """Application principale HL7 Messenger - Version finale corrig√©e"""
    
    def __init__(self, root, config):
        self.logger = logging.getLogger("HL7Messenger.App")
        self.root = root
        self.config = config

        # Configuration initiale de la fen√™tre
        self.root.title("HL7 Messenger - Interface H√¥pital")
        self._set_app_icon()
        self.root.geometry("1024x768")
        self.root.minsize(800, 600)
        self.root.option_add("*Font", "Helvetica 12")

        # Composants principaux
        self.mllp_client = MLLPClient(config.get_section('hosts'))
        self.message_builder = HL7MessageBuilder()

        # √âtats internes
        self.current_screen = None
        self.current_user = None
        self.department = None

        # Styles
        self._setup_styles()

        # Protection contre les erreurs de widgets d√©truits
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)

        # Afficher l'√©cran de connexion
        self.show_login_screen()

    def _set_app_icon(self):
        """Configure l'ic√¥ne de la fen√™tre avec gestion d'erreur"""
        try:
            base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            resources_dir = os.path.join(base_dir, "resources")

            if platform.system() == "Darwin":  # macOS
                png_path = os.path.join(resources_dir, "logo.png")
                if os.path.exists(png_path):
                    icon = PhotoImage(file=png_path)
                    self.root.iconphoto(True, icon)
                    print("‚úÖ Ic√¥ne PNG charg√©e (macOS)")
            else:
                ico_path = os.path.join(resources_dir, "logo.ico")
                if os.path.exists(ico_path):
                    self.root.iconbitmap(ico_path)
                    print("‚úÖ Ic√¥ne ICO charg√©e")

        except Exception as e:
            print(f"‚ùå Erreur chargement ic√¥ne : {e}")

    def _setup_styles(self):
        """Configure les styles Tkinter avec gestion d'erreur"""
        try:
            style = ttk.Style()
            if 'clam' in style.theme_names():
                style.theme_use('clam')

            # Styles de base
            style.configure("TFrame", background="#f0f0f0")
            style.configure("TLabel", background="#f0f0f0", font=("Helvetica", 10))
            style.configure("TButton", font=("Helvetica", 10, "bold"), padding=5)
            style.configure("Title.TLabel", font=("Helvetica", 16, "bold"), foreground="#333333")
            style.configure("Subtitle.TLabel", font=("Helvetica", 12, "bold"), foreground="#555555")
            style.configure("Error.TLabel", foreground="red", font=("Helvetica", 10))
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur configuration styles: {e}")

    def show_login_screen(self):
        """Affiche l'√©cran de connexion avec nettoyage s√©curis√©"""
        try:
            # Nettoyage s√©curis√© de l'√©cran pr√©c√©dent
            if self.current_screen:
                self._safe_destroy_widget(self.current_screen)
                self.current_screen = None
            
            # Forcer la mise √† jour pour √©viter les conflits
            self.root.update_idletasks()
            
            # Cr√©er le nouvel √©cran
            self.current_screen = LoginScreen(self.root, self._on_login)
            self.current_screen.pack(fill=tk.BOTH, expand=True)
            
            print("‚úÖ √âcran de connexion affich√©")
            
        except Exception as e:
            print(f"‚ùå Erreur affichage √©cran connexion: {e}")

    def show_dashboard(self):
        """Affiche le tableau de bord avec transition s√©curis√©e"""
        try:
            print("üîÑ Chargement du dashboard...")

            # Nettoyage s√©curis√© de l'√©cran pr√©c√©dent
            if self.current_screen:
                print("üßπ Suppression de l'√©cran pr√©c√©dent")
                self._safe_destroy_widget(self.current_screen)
                self.current_screen = None
            
            # Forcer la mise √† jour
            self.root.update_idletasks()
            
            # Petit d√©lai pour laisser le temps au nettoyage
            self.root.after(100, self._create_dashboard)
            
        except Exception as e:
            print(f"‚ùå Erreur pr√©paration dashboard: {e}")

    def _create_dashboard(self):
        """Cr√©e le dashboard de mani√®re s√©curis√©e"""
        try:
            print("üöÄ Cr√©ation du dashboard...")
            
            self.current_screen = Dashboard(
                self.root,
                self.current_user,
                self.department,
                self.mllp_client,
                self.message_builder,
                self.config,
                self._on_logout
            )
            self.current_screen.pack(fill=tk.BOTH, expand=True)
            
            print("‚úÖ Dashboard cr√©√© et affich√©")

        except Exception as e:
            print(f"‚ùå Erreur cr√©ation Dashboard : {e}")
            import traceback
            traceback.print_exc()
            # Retourner √† l'√©cran de connexion en cas d'erreur
            self.show_login_screen()

    def _safe_destroy_widget(self, widget):
        """D√©truit un widget de mani√®re s√©curis√©e"""
        try:
            if widget and widget.winfo_exists():
                widget.destroy()
                print("‚úÖ Widget d√©truit proprement")
        except tk.TclError:
            # Widget d√©j√† d√©truit, ignorer
            print("‚ö†Ô∏è Widget d√©j√† d√©truit")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur destruction widget: {e}")

    def _on_login(self, username, department):
        """Callback apr√®s connexion avec validation"""
        try:
            if not username or not department:
                return
            
            self.current_user = username
            self.department = department
            
            self.logger.info(f"‚úÖ Connexion r√©ussie : {username} - {department}")
            print(f"‚úÖ Connexion valid√©e: {username} / {department}")
            
            # Transition vers le dashboard
            self.show_dashboard()
            
        except Exception as e:
            print(f"‚ùå Erreur callback connexion: {e}")

    def _on_logout(self):
        """Callback apr√®s d√©connexion avec nettoyage"""
        try:
            print("üö™ D√©connexion en cours...")
            
            # R√©initialiser les variables
            user = self.current_user
            self.current_user = None
            self.department = None
            
            self.logger.info(f"üö™ D√©connexion : {user}")
            
            # Retourner √† l'√©cran de connexion
            self.show_login_screen()
            
        except Exception as e:
            print(f"‚ùå Erreur d√©connexion: {e}")

    def _on_closing(self):
        """G√®re la fermeture propre de l'application"""
        try:
            result = messagebox.askyesno(
                "Confirmation",
                "Voulez-vous vraiment quitter HL7 Messenger ?",
                icon="question"
            )
            
            if result:
                self._cleanup_and_quit()
                
        except Exception as e:
            print(f"‚ùå Erreur fermeture: {e}")
            self.root.quit()

    def _cleanup_and_quit(self):
        """Nettoie les ressources et quitte proprement"""
        try:
            print("üßπ Nettoyage avant fermeture...")
            
            # Nettoyage de l'√©cran actuel
            if self.current_screen:
                self._safe_destroy_widget(self.current_screen)
            
            print("‚úÖ Nettoyage termin√©")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage: {e}")
        finally:
            self.root.quit()
