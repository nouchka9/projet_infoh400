"""
Interface pour le département de pharmacie.
"""
import tkinter as tk
from tkinter import ttk, messagebox
import logging
import threading

class PharmacyFrame(ttk.Frame):
        # Configurer les comportements améliorés des menus déroulants
        self._setup_combobox_behavior()

    def __init__(self, parent, mllp_client, message_builder, on_message_callback):
        super().__init__(parent)
        self.logger = logging.getLogger("HL7Messenger.PharmacyUI")
        self.mllp_client = mllp_client
        self.message_builder = message_builder
        self.on_message_callback = on_message_callback
        self.processing = False
        self._create_widgets()
        self._bind_events()

    def _create_widgets(self):
        title = ttk.Label(self, text="Prescriptions médicamenteuses", style="Title.TLabel")
        title.pack(pady=(10, 5))

        main_frame = ttk.Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True)

        frame = ttk.LabelFrame(main_frame, text="Nouvelle prescription", padding=10)
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Variables
        self.patient_id_var = tk.StringVar()
        self.prescription_id_var = tk.StringVar()
        self.doctor_var = tk.StringVar()
        self.instructions_var = tk.StringVar()

        # Premier groupe - informations de base
        info_frame = ttk.Frame(frame)
        info_frame.pack(fill=tk.X, pady=5)
        
        info_frame.columnconfigure(1, weight=1)
        info_frame.columnconfigure(3, weight=1)

        self._entry_grid(info_frame, "ID Patient:", self.patient_id_var, row=0, col=0)
        self._entry_grid(info_frame, "ID Prescription:", self.prescription_id_var, row=0, col=2)
        self._entry_grid(info_frame, "Médecin:", self.doctor_var, row=1, col=0, colspan=3)
        
        # Instructions (TextArea pour plus de flexibilité)
        instr_frame = ttk.LabelFrame(frame, text="Instructions")
        instr_frame.pack(fill=tk.X, pady=10)
        
        self.instructions_text = tk.Text(instr_frame, height=2, width=50, wrap="word")
        self.instructions_text.pack(fill=tk.X, expand=True, padx=5, pady=5)
        self.instructions_text.bind("<<Modified>>", self._on_instructions_modified)

        # Médicaments
        med_label = ttk.Label(frame, text="Médicaments", style="Subtitle.TLabel")
        med_label.pack(anchor="w", pady=(10, 5))
        
        med_container = ttk.Frame(frame)
        med_container.pack(fill=tk.BOTH, expand=True)
        
        self.med_frames = []
        self.medications = []
        
        # Créer 3 sections médicament au lieu de 2 pour plus de flexibilité
        for i in range(3):
            med_data = self._create_med_section(med_container, index=i+1)
            self.medications.append(med_data)
        
        # Barre de statut
        status_frame = ttk.Frame(self)
        status_frame.pack(fill=tk.X, pady=5)
        
        self.status_var = tk.StringVar(value="Prêt")
        status_label = ttk.Label(status_frame, textvariable=self.status_var)
        status_label.pack(side=tk.LEFT, padx=10)
        
        self.progress = ttk.Progressbar(status_frame, mode="indeterminate", length=150)
        self.progress.pack(side=tk.RIGHT, padx=10)
        self.progress.pack_forget()  # Masquer jusqu'à utilisation

        # Boutons
        btn_frame = ttk.Frame(self)
        btn_frame.pack(pady=10)
        
        self.send_btn = ttk.Button(btn_frame, text="Envoyer", command=self._send_message, width=15)
        self.send_btn.pack(side=tk.RIGHT, padx=5)
        
        self.reset_btn = ttk.Button(btn_frame, text="Réinitialiser", command=self._reset_form, width=15)
        self.reset_btn.pack(side=tk.RIGHT, padx=5)

        self._set_defaults()

    def _create_med_section(self, parent, index):
        """Crée une section pour un médicament"""
        frame = ttk.LabelFrame(parent, text=f"Médicament {index}")
        frame.pack(fill=tk.X, pady=5)
        
        self.med_frames.append(frame)
        
        # Variables
        med_data = {
            "code_var": tk.StringVar(),
            "name_var": tk.StringVar(),
            "dose_var": tk.StringVar(),
            "frequency_var": tk.StringVar(),
            "route_var": tk.StringVar()
        }
        
        # Layout grille pour aligner les champs
        frame.columnconfigure(1, weight=1)
        frame.columnconfigure(3, weight=1)
        
        self._entry_grid(frame, "Code:", med_data["code_var"], row=0, col=0)
        self._entry_grid(frame, "Nom:", med_data["name_var"], row=0, col=2)
        self._entry_grid(frame, "Dose:", med_data["dose_var"], row=1, col=0)
        self._entry_grid(frame, "Fréquence:", med_data["frequency_var"], row=1, col=2)
        
        # Voie d'administration avec menu déroulant
        ttk.Label(frame, text="Voie:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        routes = ["PO", "IV", "IM", "SC", "INH", "TOP", "SL", "PR", "TD"]
        route_combo = ttk.Combobox(frame, textvariable=med_data["route_var"], 
                                   values=routes, width=10, state="readonly")
        route_combo.grid(row=2, column=1, sticky="w", padx=5, pady=5)
        
        # Légende pour les voies d'administration
        ttk.Label(frame, text="(PO: oral, IV: intraveineux, IM: intramusculaire, etc.)", 
                  font=("Helvetica", 8), foreground="#888888").grid(
            row=2, column=2, columnspan=2, sticky="w", padx=5, pady=5)
        
        return med_data

    def _entry_grid(self, parent, label, var, row, col, colspan=1):
        """Ajoute un champ label + entry dans une grille"""
        ttk.Label(parent, text=label).grid(row=row, column=col, sticky="w", padx=5, pady=5)
        entry = ttk.Entry(parent, textvariable=var)
        entry.grid(row=row, column=col+1, columnspan=colspan, sticky="ew", padx=5, pady=5)
        return entry

    def _on_instructions_modified(self, event=None):
        """Met à jour la variable instructions depuis le champ Text"""
        if self.instructions_text.edit_modified():
            self.instructions_var.set(self.instructions_text.get("1.0", "end-1c"))
            self.instructions_text.edit_modified(False)

    def _bind_events(self):
        """Attache les gestionnaires d'événements"""
        # Touche Entrée pour envoyer le formulaire
        self.bind_all("<Return>", lambda event: self._send_message() if self.winfo_ismapped() else None)
        
        # Focus pour sélectionner automatiquement le contenu
        for frame in self.med_frames + [self.winfo_children()[1]]:
            self._bind_entries_in_frame(frame)

    def _bind_entries_in_frame(self, parent):
        """Attache les événements de focus aux champs dans un frame"""
        for child in parent.winfo_children():
            if isinstance(child, ttk.Frame) or isinstance(child, ttk.LabelFrame):
                self._bind_entries_in_frame(child)
            elif isinstance(child, ttk.Entry):
                child.bind("<FocusIn>", self._on_entry_focus)

    def _on_entry_focus(self, event):
        """Gère le focus sur un champ"""
        event.widget.select_range(0, tk.END)

    def _set_defaults(self):
        """Initialise avec des valeurs par défaut"""
        self.patient_id_var.set("P12345")
        self.prescription_id_var.set("RX98765")
        self.doctor_var.set("Dr. SMITH")
        
        # Définir les instructions
        self.instructions_text.delete("1.0", tk.END)
        self.instructions_text.insert("1.0", "À prendre après les repas. Traitement pour 10 jours.")
        self._on_instructions_modified()

        # Médicament 1
        self.medications[0]["code_var"].set("AMOX")
        self.medications[0]["name_var"].set("Amoxicilline")
        self.medications[0]["dose_var"].set("500mg")
        self.medications[0]["frequency_var"].set("3x/j")
        self.medications[0]["route_var"].set("PO")

        # Médicament 2
        self.medications[1]["code_var"].set("PARA")
        self.medications[1]["name_var"].set("Paracétamol")
        self.medications[1]["dose_var"].set("1g")
        self.medications[1]["frequency_var"].set("4x/j PRN")
        self.medications[1]["route_var"].set("PO")
        
        # Médicament 3 (vide par défaut)
        self.medications[2]["code_var"].set("")
        self.medications[2]["name_var"].set("")
        self.medications[2]["dose_var"].set("")
        self.medications[2]["frequency_var"].set("")
        self.medications[2]["route_var"].set("")

    def _reset_form(self):
        """Réinitialise le formulaire"""
        self.patient_id_var.set("")
        self.prescription_id_var.set("")
        self.doctor_var.set("")
        
        # Effacer les instructions
        self.instructions_text.delete("1.0", tk.END)
        self._on_instructions_modified()
        
        # Effacer les médicaments
        for med in self.medications:
            for var in med.values():
                var.set("")
                
        # Mettre à jour le statut
        self.status_var.set("Formulaire réinitialisé")
        self.after(3000, lambda: self.status_var.set("Prêt"))

    def _send_message(self):
        """Envoie la prescription"""
        if self.processing:
            return
            
        patient_id = self.patient_id_var.get().strip()
        if not patient_id:
            messagebox.showwarning("Validation", "ID Patient requis")
            return

        prescription_id = self.prescription_id_var.get().strip()
        doctor = self.doctor_var.get().strip()
        instructions = self.instructions_var.get().strip()

        # Recueillir les médicaments valides (avec code et nom)
        meds = []
        for med_data in self.medications:
            code = med_data["code_var"].get().strip()
            name = med_data["name_var"].get().strip()
            dose = med_data["dose_var"].get().strip()
            freq = med_data["frequency_var"].get().strip()
            route = med_data["route_var"].get().strip()

            if code and name:
                # Construire un nom complet avec dose, fréquence et voie
                route_text = f"({route})" if route else ""
                full_name = f"{name} {dose} {freq} {route_text}".strip()
                meds.append({
                    "code": code,
                    "name": full_name
                })

        if not meds:
            messagebox.showwarning("Validation", "Au moins un médicament doit être renseigné")
            return
            
        # Débuter le traitement
        self.processing = True
        self.status_var.set("Envoi en cours...")
        self.send_btn.configure(state="disabled")
        self.progress.pack(side=tk.RIGHT, padx=10)
        self.progress.start(10)
        
        # Utiliser un thread pour l'envoi
        threading.Thread(target=self._send_thread, 
                       args=(patient_id, prescription_id, doctor, instructions, meds), 
                       daemon=True).start()
        
    def _send_thread(self, patient_id, prescription_id, doctor, instructions, meds):
        """Fonction exécutée dans un thread pour envoyer le message"""
        try:
            # Ajouter des informations du médecin aux instructions si présentes
            if doctor:
                full_instructions = f"Prescrit par: {doctor}\n{instructions}"
            else:
                full_instructions = instructions
                
            success_count = 0
            error_messages = []
            
            # Envoi de chaque médicament comme message séparé
            for i, med in enumerate(meds):
                order_data = {
                    "order_id": f"{prescription_id}-{i+1}" if prescription_id else None,
                    "test_code": med["code"],
                    "test_name": med["name"],
                    "comments": full_instructions
                }
                
                message, control_id = self.message_builder.create_orm_o01(patient_id, order_data)
                
                # Tentative d'envoi avec 3 essais
                sent = False
                max_attempts = 3
                
                for attempt in range(1, max_attempts + 1):
                    self.logger.info(f"Tentative d'envoi #{attempt} pour {med['name']}")
                    success, response = self.mllp_client.send_message(message, "PHARMACY_SYSTEM")
                    
                    if success:
                        self.logger.info(f"✅ Médicament {med['name']} envoyé (ID: {control_id})")
                        success_count += 1
                        sent = True
                        break
                    else:
                        self.logger.warning(f"❌ Essai #{attempt} échoué : {response}")
                        
                if not sent:
                    error_messages.append(f"Échec d'envoi pour {med['name']}")

            # Résumer les résultats
            if success_count == len(meds):
                final_message = f"Tous les médicaments envoyés avec succès ({success_count}/{len(meds)})"
                self.after(0, lambda: self._show_success(final_message))
            elif success_count > 0:
                partial_message = f"Envoi partiel : {success_count}/{len(meds)} médicaments envoyés"
                self.after(0, lambda: self._show_warning(partial_message))
            else:
                error_text = "\n".join(error_messages)
                self.after(0, lambda: self._show_error(f"Échec d'envoi : {error_text}"))

        except Exception as e:
            self.logger.error(f"Erreur : {str(e)}")
            self.after(0, lambda: self._show_error(f"Erreur: {str(e)}"))
            
        finally:
            # Réactiver l'interface
            self.after(0, self._end_processing)

    def _end_processing(self):
        """Termine le traitement et réactive l'interface"""
        self.processing = False
        self.progress.stop()
        self.progress.pack_forget()
        self.send_btn.configure(state="normal")

    def _show_success(self, message):
        """Affiche un message de succès"""
        self.status_var.set("✅ " + message)
        self.on_message_callback(True, message)
        # Remettre prêt après un délai
        self.after(3000, lambda: self.status_var.set("Prêt"))

    def _show_warning(self, message):
        """Affiche un avertissement"""
        self.status_var.set("⚠️ " + message)
        self.on_message_callback(False, message)
        messagebox.showwarning("Avertissement", message)

    def _show_error(self, message):
        """Affiche un message d'erreur"""
        self.status_var.set("❌ " + message)
        self.on_message_callback(False, message)
        messagebox.showerror("Erreur", message)
    def _setup_combobox_behavior(self):
        """Configure les comportements améliorés pour tous les Combobox"""
        # Trouver tous les Combobox dans l'interface
        for widget in self.winfo_children():
            self._find_and_setup_comboboxes(widget)
    
    def _find_and_setup_comboboxes(self, parent):
        """Recherche et configure récursivement tous les Combobox"""
        for child in parent.winfo_children():
            if isinstance(child, ttk.Combobox):
                # Configurer le double-clic pour valider la sélection
                child.bind("<Double-1>", lambda e: self._on_combobox_doubleclick(e))
                
                # Configurer la touche Entrée pour valider aussi
                child.bind("<Return>", lambda e: self._on_combobox_enter(e))
                
                # S'assurer que la sélection est appliquée lors du clic
                child.bind("<<ComboboxSelected>>", lambda e: self._on_combobox_selected(e))
            
            # Chercher récursivement dans les enfants
            if hasattr(child, "winfo_children"):
                self._find_and_setup_comboboxes(child)
    
    def _on_combobox_doubleclick(self, event):
        """Gère le double-clic sur un menu déroulant"""
        combobox = event.widget
        
        # Si le menu est ouvert, le fermer et valider la sélection
        if combobox["state"] == "readonly":
            # Forcer la mise à jour de la variable liée
            value = combobox.get()
            var_name = str(combobox.cget("textvariable"))
            
            # Passer au champ suivant
            combobox.tk_focusNext().focus()
            
            # Forcer la mise à jour visuelle
            self.update_idletasks()
    
    def _on_combobox_enter(self, event):
        """Gère la touche Entrée dans un menu déroulant"""
        combobox = event.widget
        
        # Forcer la mise à jour de la variable liée
        value = combobox.get()
        
        # Passer au champ suivant
        combobox.tk_focusNext().focus()
        
        # Forcer la mise à jour visuelle
        self.update_idletasks()
    
    def _on_combobox_selected(self, event):
        """Gère la sélection dans un menu déroulant"""
        # Forcer la mise à jour visuelle
        self.update_idletasks()
